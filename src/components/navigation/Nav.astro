---
import { getLangFromUrl, useTranslations } from '../../i18n/utils';
import { getLocalizedPath } from '../../utils/navigation';
import { companyData } from '../../data/company';
import LanguageToggle from './LanguageToggle.astro';
import ThemeToggle from './ThemeToggle.astro';
import Logo from './Logo.astro';

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
const currentPath = new URL(Astro.request.url).pathname;
const isArabic = lang === 'ar';

// Navigation items
const navItems = [
  { path: '', label: 'nav.home' },
  { path: 'products', label: 'nav.products' },
  { path: 'about', label: 'nav.about' },
  { path: 'contact', label: 'nav.contact' }
];
---

<header class="fixed w-full top-0 z-50 bg-white/95 dark:bg-gray-900/90 backdrop-blur-md border-b border-gray-200 dark:border-gray-800/50 shadow-sm transition-all duration-300">
  <nav class="container relative mx-auto px-4" aria-label="Main navigation">
    <!-- Desktop Navigation -->
    <div class={`hidden md:flex items-center justify-between h-16 ${isArabic ? 'flex-row-reverse' : ''}`}>
      <div class="flex-shrink-0">
        <a href={getLocalizedPath(lang)} class="block transition-transform hover:scale-105">
          <Logo class="h-8 w-auto" />
        </a>
      </div>

      <div class={`flex items-center gap-8 ${isArabic ? 'mr-8' : 'ml-8'}`}>
        <div class="flex items-center gap-2">
          {navItems.map(({ path, label }) => {
            const isActive = currentPath === getLocalizedPath(lang, path);
            return (
              <a
                href={getLocalizedPath(lang, path)}
                class={`px-4 py-2 text-sm font-medium rounded-full transition-all duration-200 ${isArabic ? 'font-arabic' : ''} ${
                  isActive
                    ? 'bg-emerald-100 dark:bg-emerald-900/40 text-emerald-700 dark:text-emerald-300'
                    : 'text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-800 hover:text-emerald-600 dark:hover:text-emerald-400'
                }`}
              >
                {t(label)}
              </a>
            );
          })}
        </div>
        <div class="flex items-center gap-3 border-l border-gray-200 dark:border-gray-700 pl-6">
          <ThemeToggle />
          <LanguageToggle />
        </div>
      </div>
    </div>

    <!-- Mobile Navigation -->
    <div class={`flex md:hidden items-center justify-between h-14 ${isArabic ? 'flex-row-reverse' : ''}`}>
      <div class="flex-shrink-0">
        <a href={getLocalizedPath(lang)} class="block transition-transform hover:scale-105">
          <Logo class="h-7 w-auto" />
        </a>
      </div>

      <div class="flex items-center gap-2">
        <ThemeToggle />
        <LanguageToggle />
        <button
          type="button"
          class="text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-800 p-2 rounded-lg transition-all"
          aria-expanded="false"
          aria-controls="mobile-menu"
          id="menu-toggle"
        >
          <span class="sr-only">Open main menu</span>
          <svg class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
          </svg>
        </button>
      </div>
    </div>

    <!-- Mobile Menu -->
    <div id="mobile-menu" class="hidden md:hidden">
      <div class={`px-1 py-2 space-y-1 ${isArabic ? 'text-right' : 'text-left'}`}>
        {navItems.map(({ path, label }) => {
          const isActive = currentPath === getLocalizedPath(lang, path);
          return (
            <a
              href={getLocalizedPath(lang, path)}
              class={`block px-4 py-2.5 text-sm font-medium rounded-lg transition-all duration-200 ${isArabic ? 'font-arabic' : ''} ${
                isActive
                  ? 'bg-emerald-100 dark:bg-emerald-900/40 text-emerald-700 dark:text-emerald-300'
                  : 'text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-800 hover:text-emerald-600 dark:hover:text-emerald-400'
              }`}
            >
              {t(label)}
            </a>
          );
        })}
      </div>
    </div>
  </nav>
</header>

<script>
  const menuToggle = document.getElementById('menu-toggle');
  const mobileMenu = document.getElementById('mobile-menu');
  let isOpen = false;

  if (menuToggle && mobileMenu) {
    menuToggle.addEventListener('click', () => {
      isOpen = !isOpen;
      menuToggle.setAttribute('aria-expanded', String(isOpen));
      mobileMenu.classList.toggle('hidden');

      // Toggle menu icon
      const icon = menuToggle.querySelector('svg');
      if (isOpen) {
        icon.innerHTML = `
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
        `;
      } else {
        icon.innerHTML = `
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
        `;
      }
    });
  }
</script>

<!-- Spacer to prevent content from going under fixed header -->
<div class="h-[72px] md:h-[80px]"></div>

<script>
  // Mobile menu toggle with smooth animation
  const menuToggle = document.getElementById('menu-toggle');
  const mobileMenu = document.getElementById('mobile-menu');

  if (menuToggle && mobileMenu) {
    menuToggle.addEventListener('click', () => {
      const expanded = menuToggle.getAttribute('aria-expanded') === 'true';
      menuToggle.setAttribute('aria-expanded', (!expanded).toString());
      if (expanded) {
        mobileMenu.style.maxHeight = '0px';
        setTimeout(() => {
          mobileMenu.classList.add('hidden');
        }, 300);
      } else {
        mobileMenu.classList.remove('hidden');
        mobileMenu.style.maxHeight = mobileMenu.scrollHeight + 'px';
      }
    });
  }
</script>

<style>
  /* Smooth transitions */
  #mobile-menu {
    transition: max-height 0.3s ease-in-out;
    max-height: 0;
    overflow: hidden;
  }

  /* Glass effect for fixed header */
  header {
    box-shadow: 0 1px 2px 0 rgb(0 0 0 / 0.05);
  }

  /* Logo hover effect */
  a:hover :global(img) {
    opacity: 0.9;
    transform: scale(1.02);
    transition: all 0.2s ease;
  }

  /* Active link effect */
  a.active {
    position: relative;
  }

  a.active::after {
    content: '';
    position: absolute;
    bottom: -2px;
    left: 0;
    right: 0;
    height: 2px;
    background: currentColor;
    border-radius: 2px;
    opacity: 0.5;
  }
</style>
